// ------------------------------------------------------------------------------
//  <auto-generated>
//      Dieser Code wurde vom Coded UI-Test-Generator generiert.
//      Version: 15.0.0.0
//
//      In dieser Datei sind spezialisierte Klassen definiert, die in einem
//      Coded UI-Test verwendet werden.
//      In dieser Datei können die erforderlichen Anpassungen vorgenommen werden.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// TestFallErstellen - Verwenden Sie "TestFallErstellenParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void TestFallErstellen()
        {
            #region Variable Declarations
            WpfWindow uIWPFWindow = this.UIWPFWindow;
            WpfEdit uIInputTxtEdit = this.UIEintragErstellenWindow.UIUsNameCustom.UIInputTxtEdit;
            WpfEdit uITxtBoxstueckFilmEdit = this.UIEintragErstellenWindow.UITxtBoxstueckFilmEdit;
            WpfEdit uITxtBoxKuenstlerProduEdit = this.UIEintragErstellenWindow.UITxtBoxKuenstlerProduEdit;
            WpfEdit uITxtBoxDauerStundenEdit = this.UIEintragErstellenWindow.UITxtBoxDauerStundenEdit;
            WpfEdit uITxtBoxDauerMinEdit = this.UIEintragErstellenWindow.UITxtBoxDauerMinEdit;
            WpfEdit uITxtBoxDauerSecEdit = this.UIEintragErstellenWindow.UITxtBoxDauerSecEdit;
            WpfDatePicker uIErstellungDatePicker = this.UIEintragErstellenWindow.UIErstellungDatePicker;
            #endregion

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(1182, 787));

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(265, 29));

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(268, 24));

            // "TestName" in "inputTxt" Textfeld eingeben
            uIInputTxtEdit.Text = this.TestFallErstellenParams.UIInputTxtEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(278, 186));

            // "Test Fall 1" in "txtBoxstueckFilm" Textfeld eingeben
            uITxtBoxstueckFilmEdit.Text = this.TestFallErstellenParams.UITxtBoxstueckFilmEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(271, 229));

            // "Raffaele" in "txtBoxKuenstlerProduzent" Textfeld eingeben
            uITxtBoxKuenstlerProduEdit.Text = this.TestFallErstellenParams.UITxtBoxKuenstlerProduEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(233, 276));

            // "0" in "txtBoxDauerStunden" Textfeld eingeben
            uITxtBoxDauerStundenEdit.Text = this.TestFallErstellenParams.UITxtBoxDauerStundenEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(288, 278));

            // "3" in "txtBoxDauerMin" Textfeld eingeben
            uITxtBoxDauerMinEdit.Text = this.TestFallErstellenParams.UITxtBoxDauerMinEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(362, 279));

            // "14" in "txtBoxDauerSec" Textfeld eingeben
            uITxtBoxDauerSecEdit.Text = this.TestFallErstellenParams.UITxtBoxDauerSecEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(383, 323));

            // "18-Jun-2019" in "erstellung" Datumsauswahl auswählen
            uIErstellungDatePicker.DateAsString = this.TestFallErstellenParams.UIErstellungDatePickerDateAsString;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(354, 537));
        }
        
        /// <summary>
        /// Test_Erstellen - Verwenden Sie "Test_ErstellenParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Test_Erstellen()
        {
            #region Variable Declarations
            WpfWindow uIWPFWindow = this.UIWPFWindow;
            WpfEdit uIInputTxtEdit = this.UIEintragErstellenWindow.UIUsNameCustom.UIInputTxtEdit;
            WpfEdit uITxtBoxstueckFilmEdit = this.UIEintragErstellenWindow.UITxtBoxstueckFilmEdit;
            WpfEdit uITxtBoxKuenstlerProduEdit = this.UIEintragErstellenWindow.UITxtBoxKuenstlerProduEdit;
            WpfEdit uITxtBoxDauerStundenEdit = this.UIEintragErstellenWindow.UITxtBoxDauerStundenEdit;
            WpfEdit uITxtBoxDauerMinEdit = this.UIEintragErstellenWindow.UITxtBoxDauerMinEdit;
            WpfEdit uITxtBoxDauerSecEdit = this.UIEintragErstellenWindow.UITxtBoxDauerSecEdit;
            WpfDatePicker uIErstellungDatePicker = this.UIEintragErstellenWindow.UIErstellungDatePicker;
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIM120ProjektexeListItem.UINameEdit;
            WpfButton uIErstellenButton = this.UIWPFWindow.UIItemCustom.UIErstellenButton;
            WpfButton uISpeichernButton = this.UIEintragErstellenWindow.UISpeichernButton;
            #endregion

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(1182, 787));

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(265, 29));

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(268, 24));

            // "TestName" in "inputTxt" Textfeld eingeben
            uIInputTxtEdit.Text = this.Test_ErstellenParams.UIInputTxtEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(278, 186));

            // "Test Fall 1" in "txtBoxstueckFilm" Textfeld eingeben
            uITxtBoxstueckFilmEdit.Text = this.Test_ErstellenParams.UITxtBoxstueckFilmEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(271, 229));

            // "Raffaele" in "txtBoxKuenstlerProduzent" Textfeld eingeben
            uITxtBoxKuenstlerProduEdit.Text = this.Test_ErstellenParams.UITxtBoxKuenstlerProduEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(233, 276));

            // "0" in "txtBoxDauerStunden" Textfeld eingeben
            uITxtBoxDauerStundenEdit.Text = this.Test_ErstellenParams.UITxtBoxDauerStundenEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(288, 278));

            // "3" in "txtBoxDauerMin" Textfeld eingeben
            uITxtBoxDauerMinEdit.Text = this.Test_ErstellenParams.UITxtBoxDauerMinEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(362, 279));

            // "14" in "txtBoxDauerSec" Textfeld eingeben
            uITxtBoxDauerSecEdit.Text = this.Test_ErstellenParams.UITxtBoxDauerSecEditText;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(383, 323));

            // "18-Jun-2019" in "erstellung" Datumsauswahl auswählen
            uIErstellungDatePicker.DateAsString = this.Test_ErstellenParams.UIErstellungDatePickerDateAsString;

            // Klicken "WPF" Fenster
            Mouse.Click(uIWPFWindow, new Point(354, 537));

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(82, 6));

            // Klicken "erstellen" Schaltfläche
            Mouse.Click(uIErstellenButton, new Point(44, 12));

            // "TestFall1" in "inputTxt" Textfeld eingeben
            uIInputTxtEdit.Text = this.Test_ErstellenParams.UIInputTxtEditText1;

            // "Test Fall 1" in "txtBoxstueckFilm" Textfeld eingeben
            uITxtBoxstueckFilmEdit.Text = this.Test_ErstellenParams.UITxtBoxstueckFilmEditText1;

            // "Raffaele" in "txtBoxKuenstlerProduzent" Textfeld eingeben
            uITxtBoxKuenstlerProduEdit.Text = this.Test_ErstellenParams.UITxtBoxKuenstlerProduEditText1;

            // "0" in "txtBoxDauerStunden" Textfeld eingeben
            uITxtBoxDauerStundenEdit.Text = this.Test_ErstellenParams.UITxtBoxDauerStundenEditText1;

            // "3" in "txtBoxDauerMin" Textfeld eingeben
            uITxtBoxDauerMinEdit.Text = this.Test_ErstellenParams.UITxtBoxDauerMinEditText1;

            // "15" in "txtBoxDauerSec" Textfeld eingeben
            uITxtBoxDauerSecEdit.Text = this.Test_ErstellenParams.UITxtBoxDauerSecEditText1;

            // "18-Jun-2019" in "erstellung" Datumsauswahl auswählen
            uIErstellungDatePicker.DateAsString = this.Test_ErstellenParams.UIErstellungDatePickerDateAsString1;

            // Klicken "Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(22, 7));
        }
        
        /// <summary>
        /// Test Erstellen Fehler
        /// </summary>
        public void Test_Erstellen_Assert()
        {
            #region Variable Declarations
            WpfText uITestFall1Text = this.UIWPFWindow.UIItemCustom.UIMainWindowDataGridTable.UIItem15Row.UITestFall1Cell.UITestFall1Text;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'ControlType' von "TestFall1" Bezeichnung ist gleich 'Text'
            Assert.AreEqual(this.Test_Erstellen_AssertExpectedValues.UITestFall1TextControlType, uITestFall1Text.ControlType.ToString(), "Test Erstellen Fehler");
        }
        
        /// <summary>
        /// Test_Bearbeiten_Arrange_Act - Verwenden Sie "Test_Bearbeiten_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Test_Bearbeiten_Arrange_Act()
        {
            #region Variable Declarations
            WpfText uILiedText = this.UIWPFWindow.UIItemCustom.UIMainWindowDataGridTable.UIItem15Row.UILiedCell.UILiedText;
            WpfText uITestFall1Text = this.UIWPFWindow.UIItemCustom.UIMainWindowDataGridTable.UIItem15Row.UITestFall1Cell.UITestFall1Text;
            WpfEdit uIInputTxtEdit = this.UIEintragBearbeitenWindow.UIUsNameCustom.UIInputTxtEdit;
            WpfButton uISpeichernButton = this.UIEintragBearbeitenWindow.UISpeichernButton;
            #endregion

            // Die letzte Mausaktion wurde nicht aufgezeichnet.

            // Klicken "Lied" Bezeichnung
            Mouse.Click(uILiedText, new Point(10, 7));

            // Klicken "TestFall1" Bezeichnung
            Mouse.Click(uITestFall1Text, new Point(158, 8));

            // Doppelklicken "TestFall1" Bezeichnung
            Mouse.DoubleClick(uITestFall1Text, new Point(156, 7));

            // "TestFallNr2" in "inputTxt" Textfeld eingeben
            uIInputTxtEdit.Text = this.Test_Bearbeiten_Arrange_ActParams.UIInputTxtEditText;

            // Klicken "Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(40, 9));
        }
        
        /// <summary>
        /// Test Bearbeiten Fehler
        /// </summary>
        public void Test_Bearbeiten_Assert()
        {
            #region Variable Declarations
            WpfText uITestFallNr2Text = this.UIWPFWindow.UIItemCustom.UIMainWindowDataGridTable.UIItem15Row.UITestFall1Cell.UITestFallNr2Text;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'ControlType' von "TestFallNr2" Bezeichnung ist gleich 'Text'
            Assert.AreEqual(this.Test_Bearbeiten_AssertExpectedValues.UITestFallNr2TextControlType, uITestFallNr2Text.ControlType.ToString(), "Test Bearbeiten Fehler");
        }
        
        /// <summary>
        /// Negativ_Test_Erstellen - Verwenden Sie "Negativ_Test_ErstellenParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Negativ_Test_Erstellen()
        {
            #region Variable Declarations
            WpfButton uIErstellenButton = this.UIWPFWindow.UIItemCustom.UIErstellenButton;
            WpfEdit uIInputTxtEdit = this.UIEintragErstellenWindow.UIUsNameCustom.UIInputTxtEdit;
            WpfEdit uITxtBoxstueckFilmEdit = this.UIEintragErstellenWindow.UITxtBoxstueckFilmEdit;
            WpfEdit uITxtBoxKuenstlerProduEdit = this.UIEintragErstellenWindow.UITxtBoxKuenstlerProduEdit;
            WpfEdit uITxtBoxDauerStundenEdit = this.UIEintragErstellenWindow.UITxtBoxDauerStundenEdit;
            WpfEdit uITxtBoxDauerMinEdit = this.UIEintragErstellenWindow.UITxtBoxDauerMinEdit;
            WpfEdit uITxtBoxDauerSecEdit = this.UIEintragErstellenWindow.UITxtBoxDauerSecEdit;
            WpfDatePicker uIErstellungDatePicker = this.UIEintragErstellenWindow.UIErstellungDatePicker;
            WpfButton uISpeichernButton = this.UIEintragErstellenWindow.UISpeichernButton;
            #endregion

            // Klicken "erstellen" Schaltfläche
            Mouse.Click(uIErstellenButton, new Point(63, 17));

            // "TestNegativ" in "inputTxt" Textfeld eingeben
            uIInputTxtEdit.Text = this.Negativ_Test_ErstellenParams.UIInputTxtEditText;

            // Klicken "txtBoxstueckFilm" Textfeld
            Mouse.Click(uITxtBoxstueckFilmEdit, new Point(52, 10));

            // "Raffaele" in "txtBoxKuenstlerProduzent" Textfeld eingeben
            uITxtBoxKuenstlerProduEdit.Text = this.Negativ_Test_ErstellenParams.UITxtBoxKuenstlerProduEditText;

            // "0" in "txtBoxDauerStunden" Textfeld eingeben
            uITxtBoxDauerStundenEdit.Text = this.Negativ_Test_ErstellenParams.UITxtBoxDauerStundenEditText;

            // "2" in "txtBoxDauerMin" Textfeld eingeben
            uITxtBoxDauerMinEdit.Text = this.Negativ_Test_ErstellenParams.UITxtBoxDauerMinEditText;

            // "42" in "txtBoxDauerSec" Textfeld eingeben
            uITxtBoxDauerSecEdit.Text = this.Negativ_Test_ErstellenParams.UITxtBoxDauerSecEditText;

            // "18-Jun-2019" in "erstellung" Datumsauswahl auswählen
            uIErstellungDatePicker.DateAsString = this.Negativ_Test_ErstellenParams.UIErstellungDatePickerDateAsString;

            // Klicken "Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(22, 13));
        }
        
        /// <summary>
        /// Negativ Test Erstellen Fehler
        /// </summary>
        public void Negativ_Test_Erstellen_Assert()
        {
            #region Variable Declarations
            WpfText uIStückFilmdarfText = this.UIEintragErstellenWindow.UIStückFilmdarfText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'ControlType' von "Stück / Film darf" Bezeichnung ist gleich 'Text'
            Assert.AreEqual(this.Negativ_Test_Erstellen_AssertExpectedValues.UIStückFilmdarfTextControlType, uIStückFilmdarfText.ControlType.ToString(), "Negativ Test Erstellen Fehler");
        }
        
        /// <summary>
        /// Negativ_Test_Erstellen_Arrange_Act - Verwenden Sie "Negativ_Test_Erstellen_Arrange_ActParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Negativ_Test_Erstellen_Arrange_Act()
        {
            #region Variable Declarations
            WpfButton uIErstellenButton = this.UIWPFWindow.UIItemCustom.UIErstellenButton;
            WpfEdit uIInputTxtEdit = this.UIEintragErstellenWindow.UIUsNameCustom.UIInputTxtEdit;
            WpfEdit uITxtBoxstueckFilmEdit = this.UIEintragErstellenWindow.UITxtBoxstueckFilmEdit;
            WpfEdit uITxtBoxKuenstlerProduEdit = this.UIEintragErstellenWindow.UITxtBoxKuenstlerProduEdit;
            WpfEdit uITxtBoxDauerStundenEdit = this.UIEintragErstellenWindow.UITxtBoxDauerStundenEdit;
            WpfEdit uITxtBoxDauerMinEdit = this.UIEintragErstellenWindow.UITxtBoxDauerMinEdit;
            WpfEdit uITxtBoxDauerSecEdit = this.UIEintragErstellenWindow.UITxtBoxDauerSecEdit;
            WpfDatePicker uIErstellungDatePicker = this.UIEintragErstellenWindow.UIErstellungDatePicker;
            WpfButton uISpeichernButton = this.UIEintragErstellenWindow.UISpeichernButton;
            #endregion

            // Klicken "erstellen" Schaltfläche
            Mouse.Click(uIErstellenButton, new Point(66, 13));

            // "ei" in "inputTxt" Textfeld eingeben
            uIInputTxtEdit.Text = this.Negativ_Test_Erstellen_Arrange_ActParams.UIInputTxtEditText;

            // Klicken "txtBoxstueckFilm" Textfeld
            Mouse.Click(uITxtBoxstueckFilmEdit, new Point(43, 15));

            // Klicken "erstellen" Schaltfläche
            Mouse.Click(uIErstellenButton, new Point(86, 21));

            // "NegativTest" in "inputTxt" Textfeld eingeben
            uIInputTxtEdit.Text = this.Negativ_Test_Erstellen_Arrange_ActParams.UIInputTxtEditText1;

            // "Raffaele" in "txtBoxKuenstlerProduzent" Textfeld eingeben
            uITxtBoxKuenstlerProduEdit.Text = this.Negativ_Test_Erstellen_Arrange_ActParams.UITxtBoxKuenstlerProduEditText;

            // "0" in "txtBoxDauerStunden" Textfeld eingeben
            uITxtBoxDauerStundenEdit.Text = this.Negativ_Test_Erstellen_Arrange_ActParams.UITxtBoxDauerStundenEditText;

            // "1" in "txtBoxDauerMin" Textfeld eingeben
            uITxtBoxDauerMinEdit.Text = this.Negativ_Test_Erstellen_Arrange_ActParams.UITxtBoxDauerMinEditText;

            // "2" in "txtBoxDauerSec" Textfeld eingeben
            uITxtBoxDauerSecEdit.Text = this.Negativ_Test_Erstellen_Arrange_ActParams.UITxtBoxDauerSecEditText;

            // "18-Jun-2019" in "erstellung" Datumsauswahl auswählen
            uIErstellungDatePicker.DateAsString = this.Negativ_Test_Erstellen_Arrange_ActParams.UIErstellungDatePickerDateAsString;

            // Klicken "Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(40, 15));
        }
        
        /// <summary>
        /// Negativ Test Erstellen Fehler
        /// </summary>
        public void Negativ_Test_Erstellen_Assert_Neu()
        {
            #region Variable Declarations
            WpfText uIStückFilmdarfText = this.UIEintragErstellenWindow.UIStückFilmdarfText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'ControlType' von "Stück / Film darf" Bezeichnung ist gleich 'Stück / Film darf'
            Assert.AreEqual(this.Negativ_Test_Erstellen_Assert_NeuExpectedValues.UIStückFilmdarfTextControlType, uIStückFilmdarfText.ControlType.ToString(), "Negativ Test Erstellen Fehler");
        }
        
        #region Properties
        public virtual TestFallErstellenParams TestFallErstellenParams
        {
            get
            {
                if ((this.mTestFallErstellenParams == null))
                {
                    this.mTestFallErstellenParams = new TestFallErstellenParams();
                }
                return this.mTestFallErstellenParams;
            }
        }
        
        public virtual Test_ErstellenParams Test_ErstellenParams
        {
            get
            {
                if ((this.mTest_ErstellenParams == null))
                {
                    this.mTest_ErstellenParams = new Test_ErstellenParams();
                }
                return this.mTest_ErstellenParams;
            }
        }
        
        public virtual Test_Erstellen_AssertExpectedValues Test_Erstellen_AssertExpectedValues
        {
            get
            {
                if ((this.mTest_Erstellen_AssertExpectedValues == null))
                {
                    this.mTest_Erstellen_AssertExpectedValues = new Test_Erstellen_AssertExpectedValues();
                }
                return this.mTest_Erstellen_AssertExpectedValues;
            }
        }
        
        public virtual Test_Bearbeiten_Arrange_ActParams Test_Bearbeiten_Arrange_ActParams
        {
            get
            {
                if ((this.mTest_Bearbeiten_Arrange_ActParams == null))
                {
                    this.mTest_Bearbeiten_Arrange_ActParams = new Test_Bearbeiten_Arrange_ActParams();
                }
                return this.mTest_Bearbeiten_Arrange_ActParams;
            }
        }
        
        public virtual Test_Bearbeiten_AssertExpectedValues Test_Bearbeiten_AssertExpectedValues
        {
            get
            {
                if ((this.mTest_Bearbeiten_AssertExpectedValues == null))
                {
                    this.mTest_Bearbeiten_AssertExpectedValues = new Test_Bearbeiten_AssertExpectedValues();
                }
                return this.mTest_Bearbeiten_AssertExpectedValues;
            }
        }
        
        public virtual Negativ_Test_ErstellenParams Negativ_Test_ErstellenParams
        {
            get
            {
                if ((this.mNegativ_Test_ErstellenParams == null))
                {
                    this.mNegativ_Test_ErstellenParams = new Negativ_Test_ErstellenParams();
                }
                return this.mNegativ_Test_ErstellenParams;
            }
        }
        
        public virtual Negativ_Test_Erstellen_AssertExpectedValues Negativ_Test_Erstellen_AssertExpectedValues
        {
            get
            {
                if ((this.mNegativ_Test_Erstellen_AssertExpectedValues == null))
                {
                    this.mNegativ_Test_Erstellen_AssertExpectedValues = new Negativ_Test_Erstellen_AssertExpectedValues();
                }
                return this.mNegativ_Test_Erstellen_AssertExpectedValues;
            }
        }
        
        public virtual Negativ_Test_Erstellen_Arrange_ActParams Negativ_Test_Erstellen_Arrange_ActParams
        {
            get
            {
                if ((this.mNegativ_Test_Erstellen_Arrange_ActParams == null))
                {
                    this.mNegativ_Test_Erstellen_Arrange_ActParams = new Negativ_Test_Erstellen_Arrange_ActParams();
                }
                return this.mNegativ_Test_Erstellen_Arrange_ActParams;
            }
        }
        
        public virtual Negativ_Test_Erstellen_Assert_NeuExpectedValues Negativ_Test_Erstellen_Assert_NeuExpectedValues
        {
            get
            {
                if ((this.mNegativ_Test_Erstellen_Assert_NeuExpectedValues == null))
                {
                    this.mNegativ_Test_Erstellen_Assert_NeuExpectedValues = new Negativ_Test_Erstellen_Assert_NeuExpectedValues();
                }
                return this.mNegativ_Test_Erstellen_Assert_NeuExpectedValues;
            }
        }
        
        public UIWPFWindow UIWPFWindow
        {
            get
            {
                if ((this.mUIWPFWindow == null))
                {
                    this.mUIWPFWindow = new UIWPFWindow();
                }
                return this.mUIWPFWindow;
            }
        }
        
        public UIEintragErstellenWindow UIEintragErstellenWindow
        {
            get
            {
                if ((this.mUIEintragErstellenWindow == null))
                {
                    this.mUIEintragErstellenWindow = new UIEintragErstellenWindow();
                }
                return this.mUIEintragErstellenWindow;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIEintragBearbeitenWindow UIEintragBearbeitenWindow
        {
            get
            {
                if ((this.mUIEintragBearbeitenWindow == null))
                {
                    this.mUIEintragBearbeitenWindow = new UIEintragBearbeitenWindow();
                }
                return this.mUIEintragBearbeitenWindow;
            }
        }
        #endregion
        
        #region Fields
        private TestFallErstellenParams mTestFallErstellenParams;
        
        private Test_ErstellenParams mTest_ErstellenParams;
        
        private Test_Erstellen_AssertExpectedValues mTest_Erstellen_AssertExpectedValues;
        
        private Test_Bearbeiten_Arrange_ActParams mTest_Bearbeiten_Arrange_ActParams;
        
        private Test_Bearbeiten_AssertExpectedValues mTest_Bearbeiten_AssertExpectedValues;
        
        private Negativ_Test_ErstellenParams mNegativ_Test_ErstellenParams;
        
        private Negativ_Test_Erstellen_AssertExpectedValues mNegativ_Test_Erstellen_AssertExpectedValues;
        
        private Negativ_Test_Erstellen_Arrange_ActParams mNegativ_Test_Erstellen_Arrange_ActParams;
        
        private Negativ_Test_Erstellen_Assert_NeuExpectedValues mNegativ_Test_Erstellen_Assert_NeuExpectedValues;
        
        private UIWPFWindow mUIWPFWindow;
        
        private UIEintragErstellenWindow mUIEintragErstellenWindow;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIEintragBearbeitenWindow mUIEintragBearbeitenWindow;
        #endregion
    }
    
    /// <summary>
    /// An "TestFallErstellen" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class TestFallErstellenParams
    {
        
        #region Fields
        /// <summary>
        /// "TestName" in "inputTxt" Textfeld eingeben
        /// </summary>
        public string UIInputTxtEditText = "TestName";
        
        /// <summary>
        /// "Test Fall 1" in "txtBoxstueckFilm" Textfeld eingeben
        /// </summary>
        public string UITxtBoxstueckFilmEditText = "Test Fall 1";
        
        /// <summary>
        /// "Raffaele" in "txtBoxKuenstlerProduzent" Textfeld eingeben
        /// </summary>
        public string UITxtBoxKuenstlerProduEditText = "Raffaele";
        
        /// <summary>
        /// "0" in "txtBoxDauerStunden" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerStundenEditText = "0";
        
        /// <summary>
        /// "3" in "txtBoxDauerMin" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerMinEditText = "3";
        
        /// <summary>
        /// "14" in "txtBoxDauerSec" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerSecEditText = "14";
        
        /// <summary>
        /// "18-Jun-2019" in "erstellung" Datumsauswahl auswählen
        /// </summary>
        public string UIErstellungDatePickerDateAsString = "18-Jun-2019";
        #endregion
    }
    
    /// <summary>
    /// An "Test_Erstellen" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Test_ErstellenParams
    {
        
        #region Fields
        /// <summary>
        /// "TestName" in "inputTxt" Textfeld eingeben
        /// </summary>
        public string UIInputTxtEditText = "TestName";
        
        /// <summary>
        /// "Test Fall 1" in "txtBoxstueckFilm" Textfeld eingeben
        /// </summary>
        public string UITxtBoxstueckFilmEditText = "Test Fall 1";
        
        /// <summary>
        /// "Raffaele" in "txtBoxKuenstlerProduzent" Textfeld eingeben
        /// </summary>
        public string UITxtBoxKuenstlerProduEditText = "Raffaele";
        
        /// <summary>
        /// "0" in "txtBoxDauerStunden" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerStundenEditText = "0";
        
        /// <summary>
        /// "3" in "txtBoxDauerMin" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerMinEditText = "3";
        
        /// <summary>
        /// "14" in "txtBoxDauerSec" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerSecEditText = "14";
        
        /// <summary>
        /// "18-Jun-2019" in "erstellung" Datumsauswahl auswählen
        /// </summary>
        public string UIErstellungDatePickerDateAsString = "18-Jun-2019";
        
        /// <summary>
        /// "TestFall1" in "inputTxt" Textfeld eingeben
        /// </summary>
        public string UIInputTxtEditText1 = "TestFall1";
        
        /// <summary>
        /// "Test Fall 1" in "txtBoxstueckFilm" Textfeld eingeben
        /// </summary>
        public string UITxtBoxstueckFilmEditText1 = "Test Fall 1";
        
        /// <summary>
        /// "Raffaele" in "txtBoxKuenstlerProduzent" Textfeld eingeben
        /// </summary>
        public string UITxtBoxKuenstlerProduEditText1 = "Raffaele";
        
        /// <summary>
        /// "0" in "txtBoxDauerStunden" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerStundenEditText1 = "0";
        
        /// <summary>
        /// "3" in "txtBoxDauerMin" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerMinEditText1 = "3";
        
        /// <summary>
        /// "15" in "txtBoxDauerSec" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerSecEditText1 = "15";
        
        /// <summary>
        /// "18-Jun-2019" in "erstellung" Datumsauswahl auswählen
        /// </summary>
        public string UIErstellungDatePickerDateAsString1 = "18-Jun-2019";
        #endregion
    }
    
    /// <summary>
    /// An "Test_Erstellen_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Test_Erstellen_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'ControlType' von "TestFall1" Bezeichnung ist gleich 'Text'
        /// </summary>
        public string UITestFall1TextControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// An "Test_Bearbeiten_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Test_Bearbeiten_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "TestFallNr2" in "inputTxt" Textfeld eingeben
        /// </summary>
        public string UIInputTxtEditText = "TestFallNr2";
        #endregion
    }
    
    /// <summary>
    /// An "Test_Bearbeiten_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Test_Bearbeiten_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'ControlType' von "TestFallNr2" Bezeichnung ist gleich 'Text'
        /// </summary>
        public string UITestFallNr2TextControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// An "Negativ_Test_Erstellen" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Negativ_Test_ErstellenParams
    {
        
        #region Fields
        /// <summary>
        /// "TestNegativ" in "inputTxt" Textfeld eingeben
        /// </summary>
        public string UIInputTxtEditText = "TestNegativ";
        
        /// <summary>
        /// "Raffaele" in "txtBoxKuenstlerProduzent" Textfeld eingeben
        /// </summary>
        public string UITxtBoxKuenstlerProduEditText = "Raffaele";
        
        /// <summary>
        /// "0" in "txtBoxDauerStunden" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerStundenEditText = "0";
        
        /// <summary>
        /// "2" in "txtBoxDauerMin" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerMinEditText = "2";
        
        /// <summary>
        /// "42" in "txtBoxDauerSec" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerSecEditText = "42";
        
        /// <summary>
        /// "18-Jun-2019" in "erstellung" Datumsauswahl auswählen
        /// </summary>
        public string UIErstellungDatePickerDateAsString = "18-Jun-2019";
        #endregion
    }
    
    /// <summary>
    /// An "Negativ_Test_Erstellen_Assert" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Negativ_Test_Erstellen_AssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'ControlType' von "Stück / Film darf" Bezeichnung ist gleich 'Text'
        /// </summary>
        public string UIStückFilmdarfTextControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// An "Negativ_Test_Erstellen_Arrange_Act" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Negativ_Test_Erstellen_Arrange_ActParams
    {
        
        #region Fields
        /// <summary>
        /// "ei" in "inputTxt" Textfeld eingeben
        /// </summary>
        public string UIInputTxtEditText = "ei";
        
        /// <summary>
        /// "NegativTest" in "inputTxt" Textfeld eingeben
        /// </summary>
        public string UIInputTxtEditText1 = "NegativTest";
        
        /// <summary>
        /// "Raffaele" in "txtBoxKuenstlerProduzent" Textfeld eingeben
        /// </summary>
        public string UITxtBoxKuenstlerProduEditText = "Raffaele";
        
        /// <summary>
        /// "0" in "txtBoxDauerStunden" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerStundenEditText = "0";
        
        /// <summary>
        /// "1" in "txtBoxDauerMin" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerMinEditText = "1";
        
        /// <summary>
        /// "2" in "txtBoxDauerSec" Textfeld eingeben
        /// </summary>
        public string UITxtBoxDauerSecEditText = "2";
        
        /// <summary>
        /// "18-Jun-2019" in "erstellung" Datumsauswahl auswählen
        /// </summary>
        public string UIErstellungDatePickerDateAsString = "18-Jun-2019";
        #endregion
    }
    
    /// <summary>
    /// An "Negativ_Test_Erstellen_Assert_Neu" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class Negativ_Test_Erstellen_Assert_NeuExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'ControlType' von "Stück / Film darf" Bezeichnung ist gleich 'Stück / Film darf'
        /// </summary>
        public string UIStückFilmdarfTextControlType = "Stück / Film darf";
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIWPFWindow : WpfWindow
    {
        
        public UIWPFWindow()
        {
            #region Suchkriterien
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MainWindow";
            #endregion
        }
        
        #region Properties
        public WpfButton UIErstellenButton
        {
            get
            {
                if ((this.mUIErstellenButton == null))
                {
                    this.mUIErstellenButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIErstellenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "erstellen";
                    #endregion
                }
                return this.mUIErstellenButton;
            }
        }
        
        public UIMainWindowDataGridTable UIMainWindowDataGridTable
        {
            get
            {
                if ((this.mUIMainWindowDataGridTable == null))
                {
                    this.mUIMainWindowDataGridTable = new UIMainWindowDataGridTable(this);
                }
                return this.mUIMainWindowDataGridTable;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIErstellenButton;
        
        private UIMainWindowDataGridTable mUIMainWindowDataGridTable;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIMainWindowDataGridTable : WpfTable
    {
        
        public UIMainWindowDataGridTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "mainWindowDataGrid";
            #endregion
        }
        
        #region Properties
        public UIItem15Row UIItem15Row
        {
            get
            {
                if ((this.mUIItem15Row == null))
                {
                    this.mUIItem15Row = new UIItem15Row(this);
                }
                return this.mUIItem15Row;
            }
        }
        #endregion
        
        #region Fields
        private UIItem15Row mUIItem15Row;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem15Row : WpfRow
    {
        
        public UIItem15Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfRow.PropertyNames.Name] = "15";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            #endregion
        }
        
        #region Properties
        public UITestFall1Cell UITestFall1Cell
        {
            get
            {
                if ((this.mUITestFall1Cell == null))
                {
                    this.mUITestFall1Cell = new UITestFall1Cell(this);
                }
                return this.mUITestFall1Cell;
            }
        }
        
        public UILiedCell UILiedCell
        {
            get
            {
                if ((this.mUILiedCell == null))
                {
                    this.mUILiedCell = new UILiedCell(this);
                }
                return this.mUILiedCell;
            }
        }
        #endregion
        
        #region Fields
        private UITestFall1Cell mUITestFall1Cell;
        
        private UILiedCell mUILiedCell;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UITestFall1Cell : WpfCell
    {
        
        public UITestFall1Cell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Name:";
            #endregion
        }
        
        #region Properties
        public WpfText UITestFall1Text
        {
            get
            {
                if ((this.mUITestFall1Text == null))
                {
                    this.mUITestFall1Text = new WpfText(this);
                    #region Suchkriterien
                    this.mUITestFall1Text.SearchProperties[WpfText.PropertyNames.Name] = "TestFall1";
                    #endregion
                }
                return this.mUITestFall1Text;
            }
        }
        
        public WpfText UITestFallNr2Text
        {
            get
            {
                if ((this.mUITestFallNr2Text == null))
                {
                    this.mUITestFallNr2Text = new WpfText(this);
                    #region Suchkriterien
                    this.mUITestFallNr2Text.SearchProperties[WpfText.PropertyNames.Name] = "TestFallNr2";
                    #endregion
                }
                return this.mUITestFallNr2Text;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUITestFall1Text;
        
        private WpfText mUITestFallNr2Text;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UILiedCell : WpfCell
    {
        
        public UILiedCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Art des Inhalts:";
            #endregion
        }
        
        #region Properties
        public WpfText UILiedText
        {
            get
            {
                if ((this.mUILiedText == null))
                {
                    this.mUILiedText = new WpfText(this);
                    #region Suchkriterien
                    this.mUILiedText.SearchProperties[WpfText.PropertyNames.Name] = "Lied";
                    #endregion
                }
                return this.mUILiedText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUILiedText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIEintragErstellenWindow : WpfWindow
    {
        
        public UIEintragErstellenWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Eintrag Erstellen";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Eintrag Erstellen");
            #endregion
        }
        
        #region Properties
        public UIUsNameCustom UIUsNameCustom
        {
            get
            {
                if ((this.mUIUsNameCustom == null))
                {
                    this.mUIUsNameCustom = new UIUsNameCustom(this);
                }
                return this.mUIUsNameCustom;
            }
        }
        
        public WpfEdit UITxtBoxstueckFilmEdit
        {
            get
            {
                if ((this.mUITxtBoxstueckFilmEdit == null))
                {
                    this.mUITxtBoxstueckFilmEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUITxtBoxstueckFilmEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtBoxstueckFilm";
                    this.mUITxtBoxstueckFilmEdit.WindowTitles.Add("Eintrag Erstellen");
                    #endregion
                }
                return this.mUITxtBoxstueckFilmEdit;
            }
        }
        
        public WpfEdit UITxtBoxKuenstlerProduEdit
        {
            get
            {
                if ((this.mUITxtBoxKuenstlerProduEdit == null))
                {
                    this.mUITxtBoxKuenstlerProduEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUITxtBoxKuenstlerProduEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtBoxKuenstlerProduzent";
                    this.mUITxtBoxKuenstlerProduEdit.WindowTitles.Add("Eintrag Erstellen");
                    #endregion
                }
                return this.mUITxtBoxKuenstlerProduEdit;
            }
        }
        
        public WpfEdit UITxtBoxDauerStundenEdit
        {
            get
            {
                if ((this.mUITxtBoxDauerStundenEdit == null))
                {
                    this.mUITxtBoxDauerStundenEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUITxtBoxDauerStundenEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtBoxDauerStunden";
                    this.mUITxtBoxDauerStundenEdit.WindowTitles.Add("Eintrag Erstellen");
                    #endregion
                }
                return this.mUITxtBoxDauerStundenEdit;
            }
        }
        
        public WpfEdit UITxtBoxDauerMinEdit
        {
            get
            {
                if ((this.mUITxtBoxDauerMinEdit == null))
                {
                    this.mUITxtBoxDauerMinEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUITxtBoxDauerMinEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtBoxDauerMin";
                    this.mUITxtBoxDauerMinEdit.WindowTitles.Add("Eintrag Erstellen");
                    #endregion
                }
                return this.mUITxtBoxDauerMinEdit;
            }
        }
        
        public WpfEdit UITxtBoxDauerSecEdit
        {
            get
            {
                if ((this.mUITxtBoxDauerSecEdit == null))
                {
                    this.mUITxtBoxDauerSecEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUITxtBoxDauerSecEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtBoxDauerSec";
                    this.mUITxtBoxDauerSecEdit.WindowTitles.Add("Eintrag Erstellen");
                    #endregion
                }
                return this.mUITxtBoxDauerSecEdit;
            }
        }
        
        public WpfDatePicker UIErstellungDatePicker
        {
            get
            {
                if ((this.mUIErstellungDatePicker == null))
                {
                    this.mUIErstellungDatePicker = new WpfDatePicker(this);
                    #region Suchkriterien
                    this.mUIErstellungDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "erstellung";
                    this.mUIErstellungDatePicker.WindowTitles.Add("Eintrag Erstellen");
                    #endregion
                }
                return this.mUIErstellungDatePicker;
            }
        }
        
        public WpfButton UISpeichernButton
        {
            get
            {
                if ((this.mUISpeichernButton == null))
                {
                    this.mUISpeichernButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUISpeichernButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btn_CreateSpeichern";
                    this.mUISpeichernButton.WindowTitles.Add("Eintrag Erstellen");
                    #endregion
                }
                return this.mUISpeichernButton;
            }
        }
        
        public WpfText UIStückFilmdarfText
        {
            get
            {
                if ((this.mUIStückFilmdarfText == null))
                {
                    this.mUIStückFilmdarfText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIStückFilmdarfText.SearchProperties[WpfText.PropertyNames.AutomationId] = "lblMeldung1";
                    this.mUIStückFilmdarfText.WindowTitles.Add("Eintrag Erstellen");
                    #endregion
                }
                return this.mUIStückFilmdarfText;
            }
        }
        #endregion
        
        #region Fields
        private UIUsNameCustom mUIUsNameCustom;
        
        private WpfEdit mUITxtBoxstueckFilmEdit;
        
        private WpfEdit mUITxtBoxKuenstlerProduEdit;
        
        private WpfEdit mUITxtBoxDauerStundenEdit;
        
        private WpfEdit mUITxtBoxDauerMinEdit;
        
        private WpfEdit mUITxtBoxDauerSecEdit;
        
        private WpfDatePicker mUIErstellungDatePicker;
        
        private WpfButton mUISpeichernButton;
        
        private WpfText mUIStückFilmdarfText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIUsNameCustom : WpfCustom
    {
        
        public UIUsNameCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RegexCDName";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "usName";
            this.WindowTitles.Add("Eintrag Erstellen");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIInputTxtEdit
        {
            get
            {
                if ((this.mUIInputTxtEdit == null))
                {
                    this.mUIInputTxtEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUIInputTxtEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "inputTxt";
                    this.mUIInputTxtEdit.WindowTitles.Add("Eintrag Erstellen");
                    #endregion
                }
                return this.mUIInputTxtEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIInputTxtEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Elementansicht";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIM120ProjektexeListItem UIM120ProjektexeListItem
        {
            get
            {
                if ((this.mUIM120ProjektexeListItem == null))
                {
                    this.mUIM120ProjektexeListItem = new UIM120ProjektexeListItem(this);
                }
                return this.mUIM120ProjektexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIM120ProjektexeListItem mUIM120ProjektexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIM120ProjektexeListItem : WinListItem
    {
        
        public UIM120ProjektexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinListItem.PropertyNames.Name] = "M120Projekt.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Suchkriterien
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIEintragBearbeitenWindow : WpfWindow
    {
        
        public UIEintragBearbeitenWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Eintrag Bearbeiten";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Eintrag Bearbeiten");
            #endregion
        }
        
        #region Properties
        public UIUsNameCustom1 UIUsNameCustom
        {
            get
            {
                if ((this.mUIUsNameCustom == null))
                {
                    this.mUIUsNameCustom = new UIUsNameCustom1(this);
                }
                return this.mUIUsNameCustom;
            }
        }
        
        public WpfButton UISpeichernButton
        {
            get
            {
                if ((this.mUISpeichernButton == null))
                {
                    this.mUISpeichernButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUISpeichernButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "speichern";
                    this.mUISpeichernButton.WindowTitles.Add("Eintrag Bearbeiten");
                    #endregion
                }
                return this.mUISpeichernButton;
            }
        }
        #endregion
        
        #region Fields
        private UIUsNameCustom1 mUIUsNameCustom;
        
        private WpfButton mUISpeichernButton;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIUsNameCustom1 : WpfCustom
    {
        
        public UIUsNameCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.RegexCDName";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "usName";
            this.WindowTitles.Add("Eintrag Bearbeiten");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIInputTxtEdit
        {
            get
            {
                if ((this.mUIInputTxtEdit == null))
                {
                    this.mUIInputTxtEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUIInputTxtEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "inputTxt";
                    this.mUIInputTxtEdit.WindowTitles.Add("Eintrag Bearbeiten");
                    #endregion
                }
                return this.mUIInputTxtEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIInputTxtEdit;
        #endregion
    }
}
